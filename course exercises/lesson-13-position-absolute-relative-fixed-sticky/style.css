* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: #111111;
  color: whitesmoke;
  font-family: Arial, Helvetica, sans-serif;
  font-size: 2rem;
  min-height: 1000vh;
}

h1 {
  text-align: center;
  margin-top: 20vh;
  margin-bottom: 40vh;
}

h2 {
  margin: 20vh;
}

.outer-container {
  width: 80vw;
  height: 80vh;
  margin: 40px auto;
  border: 6px dotted white;
  position: relative;
}

.inner-container {
  width: 40vw;
  height: 40vh;
  border: 6px solid yellow;
  margin: 200px auto;
}

.box {
  width: 150px;
  height: 150px;
  padding: 1rem;
  margin-bottom: 8px;
}

.static {
  background: purple;
  /* static - default position of all elements */
  position: static;
}

.absolute {
  background: blue;
  /* Elements with position "absolute" require
     a parent element with position: relative, 
     in order to position themselves relative to that parent,
     otherwise they will position themselves relative to the viewport.
     
     IMPORTANT: The element will position itself relative to the closest 
     parent that has a position value of relative.
     */
  position: absolute;
  /* 100px from the top */
  top: 0px;
  /* 350px from the left */
  left: 0px;
}

.relative {
  /* Elements with position "relative" 
     position themselves relative to their parent. */
  position: relative;
  background: red;
  left: 40vw;
}

.fixed {
  /* Positioned relative to the viewport,
     doesn't move when scrolling */
  position: fixed;
  background-color: green;
  top: 0px;
  left: 50vw;
}

.sticky {
  /* Much, much easier to understand with visual example.
  
     When an element is set to position: sticky;,
     it's initially treated as position: relative;
   
     Until it crosses a specified scroll threshold,
     at which point it becomes position: fixed;
     
     At that point, the element “sticks” in place until
     it reaches the boundaries of its parent element.*/
  position: sticky;
  background-color: orange;
  top: 0px;
  left: 50px;
}
